Protocol: http
IP: 162.55.220.72
Port: 5005
Method: POST
EndPoint: /user_info_2
request form data
 name: Olga
 age: 34
 salary: 200
http://162.55.220.72:5005/user_info_2

Вставить параметр salary из окружения в request
pm.environment.get("salary");

Вставить параметр age из окружения в age
pm.environment.get("age");

Вставить параметр name из окружения в name
pm.environment.get("name");

4. Отправить запрос.
5. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

6. Спарсить response body в json.
let jsonData = pm.response.json();

7. Спарсить request.
let reqData = request.data

8. Проверить, что json response имеет параметр start_qa_salary

pm.test("Test_1", function () {
    pm.expect(JSON.stringify(jsonData)).to.include("start_qa_salary");
});

9. Проверить, что json response имеет параметр qa_salary_after_6_months
pm.test("Test_2", function () {
    pm.expect(JSON.stringify(jsonData)).to.include("qa_salary_after_6_months");
});

10. Проверить, что json response имеет параметр qa_salary_after_12_months
pm.test("Test_3", function () {
    pm.expect(JSON.stringify(jsonData)).to.include("qa_salary_after_12_months");
    });

11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
pm.test("Test_4", function () {
    pm.expect(JSON.stringify(jsonData)).to.include("qa_salary_after_1.5_year");
    });

12. Проверить, что json response имеет параметр qa_salary_after_3.5_years  
pm.test("Test_5", function () {
    pm.expect(JSON.stringify(jsonData)).to.include("qa_salary_after_3.5_years");
    });  
13. Проверить, что json response имеет параметр person 
   pm.test("Test_6", function () {
 pm.expect(pm.response.text()).to.include("person")
    });
14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
    pm.test("Test_7", function () {
    pm.expect(jsonData.start_qa_salary).to.eql(Number(reqData.salary));
});
15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
pm.test("Test qa_salary_after_6_months = salary*2", function () {
    pm.expect(jsonData.qa_salary_after_6_months).to.eql(Number(reqData.salary)*2);
    });

16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
pm.test("Test qa_salary_after_12_months = salary*2.7", function () {
    pm.expect(jsonData.qa_salary_after_12_months).to.eql(Number(reqData.salary)*2.7);
    });

17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
pm.test("Test qa_salary_after_1.5_year = salary*3.3", function () {
    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(Number(reqData.salary)*3.3)
});

8. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
pm.test("Test qa_salary_after_3.5_years = salary*3.8", function () {
    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(Number(reqData.salary)*3.8)
    });

19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
pm.test("Person name", function () {
    pm.expect(String(jsonData.person.u_name[1])).to.eql(reqData.salary)
    });
20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
pm.test("u_age = age", function () {
    pm.expect(String(jsonData.person.u_age)).to.eql(reqData.age)
    });

21.Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
pm.test("u_salary_5_years  = salary*4.2", function () {
    pm.expect(jsonData.person.u_salary_5_years).to.eql(Number(reqData.salary)*4.2)
    });

22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person
  for(const key in jsonData.person) {
      console.log(key, jsonData.person[key])
  }
